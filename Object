//keys
	_.keys = function(obj) {
		if (!_.isObject(obj)) {
			throw TypeError('_.keys called a non-object.');
		} else {
			if (nativeKeys) {
				return nativeKeys;
			} else {
				var keys = [], p;
				for (p in obj) if (Object.prototype.hasOwnProperty.call(o,p)) keys.push(p);
					return keys;
			}
		}

	}

//allkeys
	_.allkeys = function(obj) {
		if (!_.isObject(obj)) {
			throw TypeError('_allkeys called a non-object');
		} else {
			var keys = [];
			keys = _.keys(obj);
			if (hasEnumBug) {
				collectNonEnumProps(obj, keys);
			return keys;
			}


		}
	}


//value
	_.value = function(obj) {
		if (!_.isObject(obj)) {
			throw TypeError('_VALUE called a non-object');
		} else {
			var values = [], value;
			for (value in obj){
				values.push(value);
			}
		}
	}


//has
	_.has = function(obj, key){
		return obj.hasOwnProperty.call(obj, key);
	};
	//I do not exactly what the document means.

//mapObject
	_.mapObject = function(Object,iteratee,[context]){
		var keys = ._keys(obj);
		var instantArray = [];
		for (i = 0, length = keys.length; i < length; i++) {
        		instantArray[i] = obj[keys[i]];
		}
		result[i] = iteratee(instantArray[i], i, instantArray)
		}
		return result;
	}


//pairs
	_.pairs = function(Object){
		var keys = _.keys(Object);
		var values = _.values(Object);
		var i = keys.length;
		var pairs = [];
		for (var i = 0; i < keys.length; i++;)
		{
			pairs[i] = [keys[i], values[i]];

		}
		return pairs;

	}

//invert
	_.invert = function(Object){
		var keys = _.keys(Object);
		var values = _.values(Object);
		var i = keys.length;
		var obj = {
			values[0]: keys[0];

		}

	}
