//first
	_.first = function(array, [n]){
		var instantArray = [];
		if (argument.length == 1) {
			instantArray = array[1];
		} else {
			instantArray = array.slice(0, n-1);
		}
		return instantArray.toString;
	}


//last
	_.last = function(array. [n]){
		var instantArray = [];
		var m = array.length;
		if (argument.length == 1) {
			instantArray = array[n-1];
		} else {
			instantArray = array.slice(m-n+1, m-1);
		}
		return instantArray.toString;
	}


//initial
	_.initial = function(array,[n]){
		var instantArray = [];
		var m = array.length;
		if (argument.length == 1) {
			instantArray = array.slice(0, m-2);
		} else {
			instantArray = array.slice(0, m-1-n);
		}
		return instantArray;
	}

//rest
	_.rest = function(array, [n]){
		var instantArray = [];
		var m = array.length;
		if (argument.length == 1) {
			instantArray = array.slice(1, m-1);
		} else {
			instantArray = array.slice(n-1, m-1);
		}
		return instantArray;
	}

//compact
	_.compact = function(array){

	}


//without
	_.without = function(array, *values){
		var length = argument.length;
		for (var i = 0; i < argument.length; i++) {
			values[i] = argument[i];
		}
		var newValue = values.slice(1, length-1);
		for (var i = 0; i < newValue.length; i++) {
			_.find(array, function(obj){ return obj == newValue[i]; })
		}
	}
//partition
	_.partition = function(array, predicate) {
		
	}



//flatten //to do
	_.flatten = function(array, [shallow]) {
		var length = array,length;
		for (var i = 0; i < array.length; i++) {
			if(_.isArray(array[i]) = true && argument.length !== 1) {
				_.flatten(array[i]);
			} else {
				if (_.isArray(array[i])) {

				} else {
					;
				}
			}

		}
			}
	}
//union
	_.union = function(*arrays) {
		var extendArray = {};

		for (var i = 0; i < Things.length; i++) {
			Things[i]
		}



		return extendArray;
	}
